generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESS_URI")
}

model Trabajador {
  id               Int                @id @default(autoincrement())
  idApp            String?            @unique
  nombreApellidos  String
  displayName      String?
  emails           String
  dni              String             @unique
  direccion        String?
  ciudad           String?
  telefonos        String?
  fechaNacimiento  DateTime?
  nacionalidad     String?
  nSeguridadSocial String?
  codigoPostal     String?
  cuentaCorriente  String?
  tipoTrabajador   String
  idResponsable    Int?
  idTienda         Int?
  llevaEquipo      Boolean
  tokenQR          String?
  displayFoto      String?
  excedencia       Boolean            @default(false)
  dispositivo      String?
  empresaId        String?
  contratos        Contrato2[]
  formacionSanidad FormacionSanidad[]
  empresa          Empresa?           @relation(fields: [empresaId], references: [id])
  responsable      Trabajador?        @relation("Responsable", fields: [idResponsable], references: [id])
  subordinados     Trabajador[]       @relation("Responsable")
  tienda           Tienda?            @relation(fields: [idTienda], references: [id])
  permisos         Permiso[]          @relation("PermisoToTrabajador")
  roles            Role[]             @relation("RoleToTrabajador")
}

model Tienda {
  id           Int          @id @default(autoincrement())
  nombre       String
  direccion    String?
  idExterno    Int?
  trabajadores Trabajador[]
}

model Equipo {
  id        Int    @id @default(autoincrement())
  nombre    String
  idExterno Int?
}

model Empresa {
  id             String       @id @default(uuid())
  nombre         String
  cif            String
  idExterno      Int?
  autogestionada Boolean      @default(false)
  contratos      Contrato2[]
  Trabajador     Trabajador[]
}

model Contrato {
  id              Int       @id @default(autoincrement())
  horasContrato   Float
  inicioContrato  DateTime
  finalContrato   DateTime?
  fechaAlta       DateTime
  fechaAntiguedad DateTime
  fechaBaja       DateTime?
  dni             String
  idEmpresa       String?
  idTrabajador    Int
}

model Contrato2 {
  id              String     @id @default(uuid())
  horasContrato   Float
  inicioContrato  DateTime
  finalContrato   DateTime?
  fechaAlta       DateTime
  fechaAntiguedad DateTime
  fechaBaja       DateTime?
  idEmpresa       String?
  idTrabajador    Int
  Empresa         Empresa?   @relation(fields: [idEmpresa], references: [id])
  Trabajador      Trabajador @relation(fields: [idTrabajador], references: [id], onDelete: Cascade)
}

model Role {
  id          String       @id @default(uuid())
  name        String
  permissions Permiso[]    @relation("PermisoToRole")
  users       Trabajador[] @relation("RoleToTrabajador")
}

model Permiso {
  id    String       @id @default(uuid())
  name  String
  roles Role[]       @relation("PermisoToRole")
  users Trabajador[] @relation("PermisoToTrabajador")
}

model Color {
  id    String       @id @default(uuid())
  value ColorSemanal
}

model FormacionSanidad {
  id                String     @id @default(uuid())
  nombre            String
  fecha             DateTime
  idTrabajador      Int
  duracion          String
  lugar             String
  firmadoTrabajador Boolean    @default(false)
  firmadoEmpresa    Boolean    @default(false)
  trabajador        Trabajador @relation(fields: [idTrabajador], references: [id])
}

model VideoFormacion {
  id           String     @id @default(uuid())
  name         String
  pathFile     String
  relativePath String
  date         DateTime   @default(now())
  duration     Int
  department   Department
}

model Presentacion {
  id         String     @id @default(uuid())
  name       String
  embed      String
  department Department
  date       DateTime   @default(now())
}

model Question {
  id                    String             @id @default(uuid())
  title                 String
  type                  AnswerType
  categories            QuestionCategory[]
  correctAnswerOptionId String?
  options               AnswerOption[]
  correctFreeAnswer     String[]
  date                  DateTime           @default(now())
}

model QuestionCategory {
  id         String     @id @default(uuid())
  name       String
  questions  Question[]
  department Department
}

model AnswerOption {
  id         String   @id @default(uuid())
  title      String
  Question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

enum ColorSemanal {
  green
  orange
  blue
  brown
}

enum AnswerType {
  TEST
  INPUT
}

enum Department {
  PRL
  Sanidad
}
