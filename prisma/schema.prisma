generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESS_URI")
}

model Trabajador {
  id               Int          @id @default(autoincrement())
  idApp            String?      @unique
  nombreApellidos  String
  displayName      String?
  emails           String
  workEmail        String?
  dni              String       @unique
  direccion        String?
  ciudad           String?
  telefonos        String?
  fechaNacimiento  DateTime?
  nacionalidad     String?
  nSeguridadSocial String?
  codigoPostal     String?
  cuentaCorriente  String?
  tipoTrabajador   String
  idResponsable    Int?
  idTienda         Int?
  llevaEquipo      Boolean
  tokenQR          String?
  displayFoto      String?
  excedencia       Boolean      @default(false)
  dispositivo      String?
  empresaId        String?
  nPerceptor       Int? // Nuevo campo
  esTienda         Boolean      @default(false)
  contratos        Contrato2[]
  empresa          Empresa?     @relation(fields: [empresaId], references: [id])
  responsable      Trabajador?  @relation("Responsable", fields: [idResponsable], references: [id])
  subordinados     Trabajador[] @relation("Responsable")
  tienda           Tienda?      @relation(fields: [idTienda], references: [id])
  permisos         Permiso[]    @relation("PermisoToTrabajador")
  roles            Role[]       @relation("RoleToTrabajador")

  // Índice único compuesto
  @@unique([empresaId, nPerceptor])
}

model Tienda {
  id           Int          @id @default(autoincrement())
  nombre       String
  direccion    String?
  idExterno    Int?
  trabajadores Trabajador[]
}

model Equipo {
  id        Int    @id @default(autoincrement())
  nombre    String
  idExterno Int?
}

model Empresa {
  id             String       @id @default(uuid())
  nombre         String
  cif            String
  idExterno      Int?
  autogestionada Boolean      @default(false)
  Trabajador     Trabajador[]
}

model Contrato2 {
  id              String     @id @default(uuid())
  horasContrato   Float
  inicioContrato  DateTime
  finalContrato   DateTime?
  fechaAlta       DateTime
  fechaAntiguedad DateTime
  fechaBaja       DateTime?
  idTrabajador    Int
  Trabajador      Trabajador @relation(fields: [idTrabajador], references: [id], onDelete: Cascade)
}

model Role {
  id          String       @id @default(uuid())
  name        String
  permissions Permiso[]    @relation("PermisoToRole")
  users       Trabajador[] @relation("RoleToTrabajador")
}

model Permiso {
  id    String       @id @default(uuid())
  name  String
  roles Role[]       @relation("PermisoToRole")
  users Trabajador[] @relation("PermisoToTrabajador")
}

model Color {
  id        String       @id @default(uuid())
  value     ColorSemanal
  updatedAt DateTime     @default(now())
}

model VideoFormacion {
  id           String     @id @default(uuid())
  name         String
  pathFile     String
  relativePath String
  date         DateTime   @default(now())
  duration     Int
  department   Department
}

model DocumentoOriginal {
  id           String             @id @default(uuid()) // Esto es el CSV
  name         String
  pathFile     String
  relativePath String
  hash         String
  date         DateTime           @default(now())
  department   Department
  firmados     DocumentoFirmado[]
}

model DocumentoFirmado {
  id                  String            @id @default(uuid())
  name                String
  pathFile            String
  relativePath        String
  hash                String
  date                DateTime          @default(now())
  department          Department
  original            DocumentoOriginal @relation(fields: [documentoOriginalId], references: [id])
  documentoOriginalId String
}

model Presentacion {
  id         String     @id @default(uuid())
  name       String
  embed      String
  department Department
  date       DateTime   @default(now())
}

model Questionnaire {
  id                  String             @id @default(uuid())
  name                String
  department          Department
  date                DateTime           @default(now())
  type                QuestionnaireType
  questions           Question[]
  categoryOfQuestions QuestionCategory[]
  maxErrors           Int                @default(0)
  nQuestions          Int?
}

model Question {
  id                    String             @id @default(uuid())
  title                 String
  type                  AnswerType
  categories            QuestionCategory[]
  correctAnswerOptionId String?
  options               AnswerOption[]
  correctFreeAnswer     String[]
  date                  DateTime           @default(now())

  Questionnaire   Questionnaire? @relation(fields: [questionnaireId], references: [id])
  questionnaireId String?
}

model QuestionCategory {
  id              String         @id @default(uuid())
  name            String
  questions       Question[]
  department      Department
  Questionnaire   Questionnaire? @relation(fields: [questionnaireId], references: [id])
  questionnaireId String?
}

model AnswerOption {
  id         String   @id @default(uuid())
  title      String
  Question   Question @relation(fields: [questionId], references: [id])
  questionId String
}

model Formacion {
  id          String           @id @default(uuid())
  name        String
  date        DateTime         @default(now())
  department  Department
  description String?
  pasos       PasosFormacion[] @relation("PasosEnFormacion")
  nPasos      Int
}

model PasosFormacion {
  id            String            @id @default(uuid())
  name          String
  description   String?
  type          PasoFormacionType
  resourceId    String
  Formaciones   Formacion?        @relation("PasosEnFormacion", fields: [formacionesId], references: [id], onDelete: Cascade)
  formacionesId String?
}

model SmsOtp {
  id    String   @id @default(uuid())
  phone String
  otp   String
  date  DateTime @default(now())
  used  Boolean  @default(false)
}

enum ColorSemanal {
  green
  orange
  blue
  brown
}

enum AnswerType {
  TEST
  INPUT
}

enum Department {
  PRL
  Sanidad
}

enum PasoFormacionType {
  VIDEO_FORMATIVO
  PRESENTACION
  CUESTIONARIO
  DOCUMENTO_PARA_FIRMAR
}

enum QuestionnaireType {
  RANDOM
  SELECTION
}
