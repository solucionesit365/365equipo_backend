generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESS_URI")
}

model Trabajador {
  id               Int                @id @default(autoincrement())
  idApp            String?            @unique
  nombreApellidos  String
  displayName      String?
  emails           String
  dni              String             @unique
  direccion        String?
  ciudad           String?
  telefonos        String?
  fechaNacimiento  DateTime?
  nacionalidad     String?
  nSeguridadSocial String?
  codigoPostal     String?
  cuentaCorriente  String?
  tipoTrabajador   String
  idResponsable    Int?
  idTienda         Int?
  llevaEquipo      Boolean
  tokenQR          String?
  displayFoto      String?
  excedencia       Boolean            @default(false)
  dispositivo      String?
  contratos        Contrato2[]
  responsable      Trabajador?        @relation("Responsable", fields: [idResponsable], references: [id])
  subordinados     Trabajador[]       @relation("Responsable")
  tienda           Tienda?            @relation(fields: [idTienda], references: [id])
  permisos         Permiso[]          @relation("PermisoToTrabajador")
  roles            Role[]             @relation("RoleToTrabajador")
  formacionSanidad FormacionSanidad[]
}

model Tienda {
  id           Int          @id @default(autoincrement())
  nombre       String
  direccion    String?
  idExterno    Int?
  trabajadores Trabajador[]
}

model Equipo {
  id        Int    @id @default(autoincrement())
  nombre    String
  idExterno Int?
}

model Empresa {
  id             String      @id @default(uuid())
  nombre         String
  cif            String
  idExterno      Int?
  autogestionada Boolean     @default(false)
  contratos      Contrato2[]
}

model Contrato {
  id              Int       @id @default(autoincrement())
  horasContrato   Float
  inicioContrato  DateTime
  finalContrato   DateTime?
  fechaAlta       DateTime
  fechaAntiguedad DateTime
  fechaBaja       DateTime?
  dni             String
  idEmpresa       String?
  idTrabajador    Int
}

model Contrato2 {
  id              String     @id @default(uuid())
  horasContrato   Float
  inicioContrato  DateTime
  finalContrato   DateTime?
  fechaAlta       DateTime
  fechaAntiguedad DateTime
  fechaBaja       DateTime?
  idEmpresa       String?
  idTrabajador    Int
  Empresa         Empresa?   @relation(fields: [idEmpresa], references: [id])
  Trabajador      Trabajador @relation(fields: [idTrabajador], references: [id], onDelete: Cascade)
}

model Role {
  id          String       @id @default(uuid())
  name        String
  permissions Permiso[]    @relation("PermisoToRole")
  users       Trabajador[] @relation("RoleToTrabajador")
}

model Permiso {
  id    String       @id @default(uuid())
  name  String
  roles Role[]       @relation("PermisoToRole")
  users Trabajador[] @relation("PermisoToTrabajador")
}

model Color {
  id    String       @id @default(uuid())
  value ColorSemanal
}

model FormacionSanidad {
  id                String     @id @default(uuid())
  nombre            String
  fecha             DateTime
  trabajador        Trabajador @relation(fields: [idTrabajador], references: [id])
  idTrabajador      Int
  duracion          String
  lugar             String
  firmadoTrabajador Boolean    @default(false)
  firmadoEmpresa    Boolean    @default(false)
}

enum ColorSemanal {
  green
  orange
  blue
  brown
}
