generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRESS_URI")
}

model Trabajador {
  id                     Int          @id @default(autoincrement())
  idApp                  String?      @unique
  nombreApellidos        String
  displayName            String?
  emails                 String
  dni                    String       @unique
  direccion              String?
  ciudad                 String?
  telefonos              String?
  fechaNacimiento        DateTime?
  nacionalidad           String?
  nSeguridadSocial       String?
  codigoPostal           String?
  cuentaCorriente        String?
  tipoTrabajador         String
  idResponsable          Int?
  idTienda               Int?
  llevaEquipo            Boolean
  tokenQR                String?
  displayFoto            String?
  excedencia             Boolean      @default(false)
  dispositivo            String?
  empresaId              String?
  esTienda               Boolean      @default(false)
  nPerceptor             Int?
  workEmail              String?
  contratos              Contrato2[]
  coordinadoraDeLaTienda Tienda?      @relation("TiendaCoordinator")
  empresa                Empresa?     @relation(fields: [empresaId], references: [id])
  responsable            Trabajador?  @relation("Responsable", fields: [idResponsable], references: [id])
  subordinados           Trabajador[] @relation("Responsable")
  tienda                 Tienda?      @relation(fields: [idTienda], references: [id])
  turnos                 Turno[]
  permisos               Permiso[]    @relation("PermisoToTrabajador")
  roles                  Role[]       @relation("RoleToTrabajador")

  @@unique([empresaId, nPerceptor])
}

model Tienda {
  id              Int              @id @default(autoincrement())
  nombre          String
  direccion       String?
  idExterno       Int?
  coordinatorId   Int?             @unique
  plantillasTurno PlantillaTurno[]
  coordinator     Trabajador?      @relation("TiendaCoordinator", fields: [coordinatorId], references: [id])
  trabajadores    Trabajador[]
  turnos          Turno[]
}

model Equipo {
  id        Int    @id @default(autoincrement())
  nombre    String
  idExterno Int?
}

model Empresa {
  id             String       @id @default(uuid())
  nombre         String
  cif            String
  idExterno      Int?
  autogestionada Boolean      @default(false)
  Trabajador     Trabajador[]
}

model Contrato2 {
  id              String     @id @default(uuid())
  horasContrato   Float
  inicioContrato  DateTime
  finalContrato   DateTime?
  fechaAlta       DateTime
  fechaAntiguedad DateTime
  fechaBaja       DateTime?
  idTrabajador    Int
  Trabajador      Trabajador @relation(fields: [idTrabajador], references: [id], onDelete: Cascade)
}

model Role {
  id          String       @id @default(uuid())
  name        String
  permissions Permiso[]    @relation("PermisoToRole")
  users       Trabajador[] @relation("RoleToTrabajador")
}

model Permiso {
  id    String       @id @default(uuid())
  name  String
  roles Role[]       @relation("PermisoToRole")
  users Trabajador[] @relation("PermisoToTrabajador")
}

model Color {
  id        String       @id @default(uuid())
  value     ColorSemanal
  updatedAt DateTime     @default(now())
}

model VideoFormacion {
  id           String     @id @default(uuid())
  name         String
  date         DateTime   @default(now())
  duration     Int
  relativePath String
  department   Department
  pathFile     String
}

model DocumentoOriginal {
  id           String             @id @default(uuid())
  name         String
  pathFile     String
  relativePath String
  hash         String
  date         DateTime           @default(now())
  department   Department
  firmados     DocumentoFirmado[]
}

model DocumentoFirmado {
  id                  String            @id @default(uuid())
  name                String
  pathFile            String
  relativePath        String
  hash                String
  date                DateTime          @default(now())
  department          Department
  documentoOriginalId String
  original            DocumentoOriginal @relation(fields: [documentoOriginalId], references: [id])
}

model Presentacion {
  id         String     @id @default(uuid())
  name       String
  embed      String
  date       DateTime   @default(now())
  department Department
}

model Questionnaire {
  id                  String             @id @default(uuid())
  name                String
  department          Department
  date                DateTime           @default(now())
  type                QuestionnaireType
  maxErrors           Int                @default(0)
  nQuestions          Int?
  questions           Question[]
  categoryOfQuestions QuestionCategory[]
}

model Question {
  id                    String             @id @default(uuid())
  title                 String
  type                  AnswerType
  correctAnswerOptionId String?
  correctFreeAnswer     String[]
  date                  DateTime           @default(now())
  questionnaireId       String?
  options               AnswerOption[]
  Questionnaire         Questionnaire?     @relation(fields: [questionnaireId], references: [id])
  categories            QuestionCategory[] @relation("QuestionToQuestionCategory")
}

model QuestionCategory {
  id              String         @id @default(uuid())
  name            String
  department      Department
  questionnaireId String?
  Questionnaire   Questionnaire? @relation(fields: [questionnaireId], references: [id])
  questions       Question[]     @relation("QuestionToQuestionCategory")
}

model AnswerOption {
  id         String   @id @default(uuid())
  title      String
  questionId String
  Question   Question @relation(fields: [questionId], references: [id])
}

model Formacion {
  id          String           @id @default(uuid())
  name        String
  date        DateTime         @default(now())
  department  Department
  description String?
  nPasos      Int
  pasos       PasosFormacion[] @relation("PasosEnFormacion")
}

model PasosFormacion {
  id            String            @id @default(uuid())
  name          String
  description   String?
  type          PasoFormacionType
  formacionesId String?
  resourceId    String
  Formaciones   Formacion?        @relation("PasosEnFormacion", fields: [formacionesId], references: [id], onDelete: Cascade)
}

model SmsOtp {
  id    String   @id @default(uuid())
  phone String
  otp   String
  date  DateTime @default(now())
  used  Boolean  @default(false)
}

model Turno {
  id           String     @id @default(uuid())
  inicio       DateTime
  final        DateTime
  tiendaId     Int
  idTrabajador Int
  borrable     Boolean    @default(false)
  Trabajador   Trabajador @relation(fields: [idTrabajador], references: [id])
  tienda       Tienda     @relation(fields: [tiendaId], references: [id])
}

model PlantillaTurno {
  id       String @id @default(uuid())
  nombre   String
  inicio   String
  final    String
  order    Int
  tiendaId Int
  tienda   Tienda @relation(fields: [tiendaId], references: [id])
}

// _id
// 6710cd5d58e0bf8608d981cd
// idUsuario
// 5160
// nombre
// "Maria Virginia Jimenez Jimenez"
// dni
// "Y9198139Q"
// tipo
// "DIA_PERSONAL"
// horasContrato
// 40
// tienda
// "t--103"
// fechaInicio
// 2024-09-30T22:00:00.000+00:00
// fechaFinal
// 2024-10-01T22:00:00.000+00:00
// fechaRevision
// null
// comentario
// null
// completa
// true
// horas
// null
model AusenciaParcial {
  id       String @id @default(uuid())
  tipo TipoAusencia
  comentario String?
  horas Int
  fechaInicio DateTime
  fechaFinal DateTime
}

model AusenciaCompleta {
  id       String @id @default(uuid())
  tipo TipoAusencia
  comentario String?
  fecha DateTime
}

enum ColorSemanal {
  green
  orange
  blue
  brown
}

enum AnswerType {
  TEST
  INPUT
}

enum Department {
  PRL
  Sanidad
}

enum PasoFormacionType {
  VIDEO_FORMATIVO
  PRESENTACION
  CUESTIONARIO
  DOCUMENTO_PARA_FIRMAR
}

enum QuestionnaireType {
  RANDOM
  SELECTION
}

enum TipoAusencia {
   BAJA
   PERMISO_MATERNIDAD_PATERNIDAD // Esta cambia de nombre!!! antes era PERMISO MATERNIDAD/PATERNIDAD
   DIA_PERSONAL
   VACACIONES
   SANCIÃ“N
   ABSENTISMO
   REM
   HORAS_JUSTIFICADAS
}